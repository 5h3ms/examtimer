{"version":3,"sources":["components/Timer.react.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["calculateTimeLeft","timeSeconds","timeLeft","days","hours","minutes","seconds","Math","floor","Timer","ref","index","onClose","useState","isPaused","setIsPaused","useImperativeHandle","setPaused","paused","setTimeSeconds","setTimeLeft","onReset","useCallback","useEffect","timer","setInterval","difference","clearTimeout","onSetPausePlay","onDelete","Grid","item","xs","Card","variant","className","Typography","Object","entries","flatMap","interval","time","Button","onClick","forwardRef","defaultTime","light","palette","type","dark","App","classes","makeStyles","root","padding","height","useStyles","isLightTheme","setIsLightTheme","icon","appliedTheme","createMuiTheme","timersCount","setTimersCount","id","createRef","timers","setTimers","onRemoveTimer","filter","value","onAddTimer","count","onPauseAll","forEach","current","onPlayAll","ThemeProvider","theme","CssBaseline","container","justify","IconButton","color","aria-label","AlarmAddSharp","edge","TextField","fullWidth","defaultValue","InputProps","disableUnderline","inputProps","style","fontSize","textAlign","spacing","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.142a0e40.chunk.js","sourcesContent":["import './Timer.css';\nimport {\n  forwardRef,\n  useImperativeHandle,\n  useEffect,\n  useState,\n  ForwardRefRenderFunction,\n  useCallback,\n} from 'react';\nimport { Grid, Typography, Card, Button } from '@material-ui/core';\n\ninterface TimeProps {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\n// given: time in seconds, function calculates how much time is left in days, minutes, seconds\nfunction calculateTimeLeft(timeSeconds: number): TimeProps {\n  let timeLeft = { days: 0, hours: 0, minutes: 0, seconds: 0 };\n\n  if (timeSeconds > 0) {\n    timeLeft = {\n      days: Math.floor(timeSeconds / (60 * 60 * 24)),\n      hours: Math.floor((timeSeconds / (60 * 60)) % 24),\n      minutes: Math.floor((timeSeconds / 60) % 60),\n      seconds: Math.floor(timeSeconds % 60),\n    };\n  }\n\n  return timeLeft;\n}\n\ninterface TimerProps extends Partial<TimeProps> {\n  index: number;\n  onClose: (index: number) => void;\n}\n\ntype TimerHandle = {\n  setPaused: (paused: boolean) => void;\n};\n\nconst Timer: ForwardRefRenderFunction<TimerHandle, TimerProps> = (\n  { days = 0, hours = 0, minutes = 0, seconds = 0, index, onClose }: TimerProps,\n  ref,\n) => {\n  const [isPaused, setIsPaused] = useState(true);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      setPaused(paused) {\n        setIsPaused(paused);\n      },\n    }),\n    [setIsPaused],\n  );\n  const [timeSeconds, setTimeSeconds] = useState(\n    days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds,\n  );\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft(timeSeconds));\n\n  const onReset = useCallback(() => {\n    setIsPaused(true);\n    setTimeSeconds(\n      days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds,\n    );\n  }, [days, hours, minutes, seconds, setIsPaused]);\n\n  useEffect(() => {\n    setTimeLeft(calculateTimeLeft(timeSeconds));\n  }, [timeSeconds]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout | null = null;\n    if (!isPaused) {\n      timer = setInterval(() => {\n        setTimeSeconds((difference) => difference - 1);\n      }, 1000);\n    }\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [isPaused]);\n\n  const onSetPausePlay = useCallback(() => {\n    setIsPaused((isPaused) => !isPaused);\n  }, []);\n\n  const onDelete = useCallback(() => {\n    onClose(index);\n  }, [onClose, index]);\n\n  return (\n    <Grid item xs={6}>\n      <Card variant=\"outlined\" className=\"Card\">\n        <Typography variant=\"h5\">Timer {index + 1}</Typography>\n        {timeSeconds > 0 ? (\n          Object.entries(timeLeft).flatMap(([interval, time]) => {\n            if (time > 0)\n              return (\n                <span key={interval}>\n                  {time} {interval}{' '}\n                </span>\n              );\n          })\n        ) : (\n          <span>Time is up!</span>\n        )}\n        <Button onClick={onSetPausePlay}>{isPaused ? 'Play' : 'Pause'}</Button>\n        <Button onClick={onReset}>Reset</Button>\n        <Button onClick={onDelete}>Close</Button>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default forwardRef(Timer);\n","import './App.css';\nimport Timer from './components/Timer.react';\nimport {\n  useState,\n  useCallback,\n  ReactElement,\n  RefObject,\n  createRef,\n} from 'react';\nimport { Grid, TextField, Button } from '@material-ui/core';\n\nimport { ThemeProvider } from '@material-ui/core';\nimport {\n  createMuiTheme,\n  makeStyles,\n  ThemeOptions,\n} from '@material-ui/core/styles';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { AlarmAddSharp } from '@material-ui/icons';\n\ntype TimerHandle = React.ElementRef<typeof Timer>;\n\ninterface TimerProps {\n  id: number;\n  ref: RefObject<TimerHandle>;\n}\n\nconst defaultTime = { minutes: 5 };\n\nfunction App(): ReactElement {\n  const useStyles = makeStyles(() => ({\n    root: {\n      padding: '20px',\n      height: '100vh',\n    },\n  }));\n\n  const classes = useStyles();\n\n  const [isLightTheme, setIsLightTheme] = useState(true);\n  const icon = !isLightTheme ? <Brightness7Icon /> : <Brightness4Icon />;\n  const appliedTheme = createMuiTheme(isLightTheme ? light : dark);\n\n  const [timersCount, setTimersCount] = useState(1);\n  const [timers, setTimers] = useState<Array<TimerProps>>([\n    { id: 0, ref: createRef<TimerHandle>() },\n  ]);\n  const onRemoveTimer = useCallback(\n    (index) => {\n      setTimers((timers) => timers.filter((value) => value.id !== index));\n    },\n    [setTimers],\n  );\n\n  const onAddTimer = useCallback(() => {\n    const id = timersCount;\n    const ref = createRef<TimerHandle>();\n    setTimers((timers) => [...timers, { id: id, ref: ref }]);\n    setTimersCount((count) => count + 1);\n  }, [timersCount]);\n\n  const onPauseAll = useCallback(() => {\n    timers.forEach((timer) => timer.ref.current?.setPaused(true));\n  }, [timers]);\n\n  const onPlayAll = useCallback(() => {\n    timers.forEach((timer) => timer.ref.current?.setPaused(false));\n  }, [timers]);\n\n  return (\n    <ThemeProvider theme={appliedTheme}>\n      <div className={classes.root}>\n        <CssBaseline />\n        <Grid container justify=\"flex-end\">\n          <Button onClick={onPlayAll}>Play all</Button>\n          <Button onClick={onPauseAll}>Pause all</Button>\n          <IconButton\n            color=\"primary\"\n            aria-label=\"add an alarm\"\n            onClick={onAddTimer}\n          >\n            <AlarmAddSharp />\n          </IconButton>\n\n          <IconButton\n            edge=\"end\"\n            color=\"inherit\"\n            aria-label=\"mode\"\n            onClick={() => setIsLightTheme(!isLightTheme)}\n          >\n            {icon}\n          </IconButton>\n        </Grid>\n        <Grid container justify=\"center\">\n          <TextField\n            fullWidth\n            variant=\"standard\"\n            defaultValue=\"CENTRE NUMBER\"\n            InputProps={{ disableUnderline: true }}\n            inputProps={{\n              style: { fontSize: 90, textAlign: 'center' },\n            }}\n          ></TextField>\n        </Grid>\n\n        <Grid container spacing={5} justify=\"center\">\n          {timers.map(({ id, ref }) => (\n            <Timer\n              {...defaultTime}\n              key={id}\n              index={id}\n              ref={ref}\n              onClose={onRemoveTimer}\n            />\n          ))}\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport const light: ThemeOptions = {\n  palette: {\n    type: 'light',\n  },\n};\nexport const dark: ThemeOptions = {\n  palette: {\n    type: 'dark',\n  },\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}