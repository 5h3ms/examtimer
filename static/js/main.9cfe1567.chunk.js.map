{"version":3,"sources":["components/Timer.react.js","App.js","reportWebVitals.js","index.js"],"names":["calculateTimeLeft","timeSeconds","timeLeft","days","Math","floor","hours","minutes","seconds","Timer","useState","setTimeSeconds","setTimeLeft","useEffect","timer","setInterval","difference","clearTimeout","timerComponents","useMemo","Object","keys","forEach","interval","push","updateUI","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAKA,SAASA,EAAkBC,GACzB,IAAIC,EAAW,GAWf,OATID,EAAc,IAChBC,EAAW,CACTC,KAAMC,KAAKC,MAAMJ,EAAW,OAC5BK,MAAOF,KAAKC,MAAOJ,EAAW,KAAgB,IAC9CM,QAASH,KAAKC,MAAOJ,EAAc,GAAM,IACzCO,QAASJ,KAAKC,MAAMJ,EAAc,MAI/BC,EA6DMO,MAvCf,YAAmE,IAAD,IAAjDN,YAAiD,MAA1C,EAA0C,MAAvCG,aAAuC,MAA/B,EAA+B,MAA5BC,eAA4B,MAAlB,EAAkB,MAAfC,eAAe,MAAL,EAAK,IAC1BE,mBAC7B,GAAPP,EAAY,GAAK,GAAa,GAARG,EAAa,GAAe,GAAVC,EAAeC,GAFO,mBACzDP,EADyD,KAC5CU,EAD4C,OAIhCD,mBAASV,EAAkBC,IAJK,mBAIzDC,EAJyD,KAI/CU,EAJ+C,KAMhEC,qBAAU,WACRF,EACS,GAAPR,EAAY,GAAK,GAAa,GAARG,EAAa,GAAe,GAAVC,EAAeC,GAEzD,IAAMM,EAAQC,aAAY,WACxBJ,GAAe,SAACK,GAAD,OAAgBA,EAAa,OAC3C,KAEH,OAAO,kBAAMC,aAAaH,MACzB,CAACX,EAAMG,EAAOC,EAASC,IAE1BK,qBAAU,WACRD,EAAYZ,EAAkBC,MAC7B,CAACA,IAEJ,IAAMiB,EAAkBC,mBAAQ,kBAvClC,SAAkBjB,GAChB,IAAMgB,EAAkB,GAcxB,OAZAE,OAAOC,KAAKnB,GAAUoB,SAAQ,SAACC,GACxBrB,EAASqB,IAIdL,EAAgBM,KACd,iCACGtB,EAASqB,GADZ,IACwBA,EAAU,MADvBA,OAMRL,EAwB+BO,CAASvB,KAAW,CAACA,IAE3D,OACE,gCACE,8DACA,mDACCgB,EAAgBQ,OAASR,EAAkB,mDCrDnCS,MATf,WACE,OACE,gCACE,cAAC,EAAD,CAAOpB,QAAS,IAChB,cAAC,EAAD,CAAOJ,KAAM,EAAGG,MAAO,EAAGC,QAAS,EAAGC,QAAS,QCItCoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9cfe1567.chunk.js","sourcesContent":["import './Timer.css';\nimport { useEffect, useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\n// given: time in seconds, function calculates how much time is left in days, minutes, seconds\nfunction calculateTimeLeft(timeSeconds) {\n  let timeLeft = {};\n\n  if (timeSeconds > 0) {\n    timeLeft = {\n      days: Math.floor(timeSeconds / (60 * 60 * 24)),\n      hours: Math.floor((timeSeconds / (60 * 60)) % 24),\n      minutes: Math.floor((timeSeconds / 60) % 60),\n      seconds: Math.floor(timeSeconds % 60),\n    };\n  }\n\n  return timeLeft;\n}\n\n//function creates span for days, minutes, hours and seconds\nfunction updateUI(timeLeft) {\n  const timerComponents = [];\n\n  Object.keys(timeLeft).forEach((interval) => {\n    if (!timeLeft[interval]) {\n      return;\n    }\n\n    timerComponents.push(\n      <span key={interval}>\n        {timeLeft[interval]} {interval}{' '}\n      </span>,\n    );\n  });\n\n  return timerComponents;\n}\n\nfunction Timer({ days = 0, hours = 0, minutes = 0, seconds = 0 }) {\n  const [timeSeconds, setTimeSeconds] = useState(\n    days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds,\n  );\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft(timeSeconds));\n\n  useEffect(() => {\n    setTimeSeconds(\n      days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds,\n    );\n    const timer = setInterval(() => {\n      setTimeSeconds((difference) => difference - 1);\n    }, 1000);\n    // Clear timeout if the component is unmounted\n    return () => clearTimeout(timer);\n  }, [days, hours, minutes, seconds]);\n\n  useEffect(() => {\n    setTimeLeft(calculateTimeLeft(timeSeconds));\n  }, [timeSeconds]);\n\n  const timerComponents = useMemo(() => updateUI(timeLeft), [timeLeft]);\n\n  return (\n    <div>\n      <h1>HacktoberFest 2020 Countdown</h1>\n      <h2>With React Hooks!</h2>\n      {timerComponents.length ? timerComponents : <span>Time is up!</span>}\n    </div>\n  );\n}\n\nTimer.propTypes = {\n  days: PropTypes.number,\n  hours: PropTypes.number,\n  minutes: PropTypes.number,\n  seconds: PropTypes.number,\n};\n\nexport default Timer;\n","import './App.css';\nimport Timer from './components/Timer.react';\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div>\n      <Timer minutes={5} />\n      <Timer days={1} hours={2} minutes={5} seconds={3} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}