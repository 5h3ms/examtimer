{"version":3,"sources":["components/Timer.react.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["calculateTimeLeft","timeSeconds","timeLeft","days","hours","minutes","seconds","Math","floor","Timer","useState","setTimeSeconds","setTimeLeft","useEffect","timer","setInterval","difference","clearTimeout","Object","entries","flatMap","interval","time","light","palette","type","dark","App","classes","makeStyles","theme","root","padding","height","useStyles","setTheme","icon","appliedTheme","createMuiTheme","defaultTime","key","timers","setTimers","addTimer","useCallback","id","length","ThemeProvider","className","CssBaseline","Grid","container","justify","IconButton","color","aria-label","onClick","AlarmAddSharp","edge","TextField","fullWidth","variant","defaultValue","inputProps","style","fontSize","textAlign","disableUnderline","spacing","map","index","item","xs","Card","Typography","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6201657.chunk.js","sourcesContent":["import './Timer.css';\r\nimport { useEffect, useState, ReactElement } from 'react';\r\n\r\ninterface TimerProps {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n}\r\n\r\n// given: time in seconds, function calculates how much time is left in days, minutes, seconds\r\nfunction calculateTimeLeft(timeSeconds: number): TimerProps {\r\n  let timeLeft = { days: 0, hours: 0, minutes: 0, seconds: 0 };\r\n\r\n  if (timeSeconds > 0) {\r\n    timeLeft = {\r\n      days: Math.floor(timeSeconds / (60 * 60 * 24)),\r\n      hours: Math.floor((timeSeconds / (60 * 60)) % 24),\r\n      minutes: Math.floor((timeSeconds / 60) % 60),\r\n      seconds: Math.floor(timeSeconds % 60),\r\n    };\r\n  }\r\n\r\n  return timeLeft;\r\n}\r\n\r\nfunction Timer({\r\n  days = 0,\r\n  hours = 0,\r\n  minutes = 0,\r\n  seconds = 0,\r\n}: Partial<TimerProps>): ReactElement {\r\n  const [timeSeconds, setTimeSeconds] = useState(\r\n    days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds,\r\n  );\r\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft(timeSeconds));\r\n\r\n  useEffect(() => {\r\n    setTimeSeconds(\r\n      days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds,\r\n    );\r\n    const timer = setInterval(() => {\r\n      setTimeSeconds((difference) => difference - 1);\r\n    }, 1000);\r\n    // Clear timeout if the component is unmounted\r\n    return () => clearTimeout(timer);\r\n  }, [days, hours, minutes, seconds]);\r\n\r\n  useEffect(() => {\r\n    setTimeLeft(calculateTimeLeft(timeSeconds));\r\n  }, [timeSeconds]);\r\n\r\n  return (\r\n    <div>\r\n      {timeSeconds > 0 ? (\r\n        Object.entries(timeLeft).flatMap(([interval, time]) => {\r\n          if (time > 0)\r\n            return (\r\n              <span>\r\n                {time} {interval}{' '}\r\n              </span>\r\n            );\r\n        })\r\n      ) : (\r\n        <span>Time is up!</span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import './App.css';\r\nimport Timer from './components/Timer.react';\r\nimport { useState, useCallback, ReactElement } from 'react';\r\nimport { Grid, Typography, TextField, Card } from '@material-ui/core';\r\n\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport {\r\n  createMuiTheme,\r\n  makeStyles,\r\n  ThemeOptions,\r\n} from '@material-ui/core/styles';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\r\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AlarmAddIcon from '@material-ui/icons/AlarmAdd';\r\nimport { AlarmAddSharp } from '@material-ui/icons';\r\n\r\nfunction App(): ReactElement {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      padding: '20px',\r\n      height: '100vh',\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const [theme, setTheme] = useState(true);\r\n  const icon = !theme ? <Brightness7Icon /> : <Brightness4Icon />;\r\n  const appliedTheme = createMuiTheme(theme ? light : dark);\r\n\r\n  const defaultTime = { minutes: 5 };\r\n  const [timers, setTimers] = useState([<Timer {...defaultTime} key={0} />]);\r\n\r\n  const addTimer = useCallback(() => {\r\n    const id = timers.length;\r\n    setTimers((timers) => [...timers, <Timer {...defaultTime} key={id} />]);\r\n  }, [timers.length]);\r\n\r\n  return (\r\n    <ThemeProvider theme={appliedTheme}>\r\n      <div className={classes.root}>\r\n        <CssBaseline />\r\n        <Grid container justify=\"flex-end\">\r\n          <IconButton\r\n            color=\"primary\"\r\n            aria-label=\"add an alarm\"\r\n            onClick={addTimer}\r\n          >\r\n            <AlarmAddSharp />\r\n          </IconButton>\r\n\r\n          <IconButton\r\n            edge=\"end\"\r\n            color=\"inherit\"\r\n            aria-label=\"mode\"\r\n            onClick={() => setTheme(!theme)}\r\n          >\r\n            {icon}\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid container justify=\"center\">\r\n          <TextField\r\n            fullWidth\r\n            variant=\"standard\"\r\n            defaultValue=\"CENTRE NUMBER\"\r\n            inputProps={{\r\n              style: { fontSize: 90, textAlign: 'center' },\r\n              disableUnderline: true,\r\n            }}\r\n          ></TextField>\r\n        </Grid>\r\n\r\n        <Grid container spacing={5} justify=\"center\">\r\n          {timers.map((timer, index) => (\r\n            <Grid item xs={6} key={index} justify=\"center\">\r\n              <Card variant=\"outlined\" className=\"Card\">\r\n                <Typography variant=\"h5\">Timer {index}</Typography>\r\n                {timer}\r\n              </Card>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport const light: ThemeOptions = {\r\n  palette: {\r\n    type: 'light',\r\n  },\r\n};\r\nexport const dark: ThemeOptions = {\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}