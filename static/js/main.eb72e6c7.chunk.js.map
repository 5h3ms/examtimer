{"version":3,"sources":["components/Timer.react.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["calculateTimeLeft","timeSeconds","timeLeft","days","hours","minutes","seconds","Math","floor","Timer","useState","setTimeSeconds","setTimeLeft","useEffect","timer","setInterval","difference","clearTimeout","Object","entries","flatMap","interval","time","App","darkMode","setDarkMode","theme","createMuiTheme","palette","type","defaultTime","key","timers","setTimers","addTimer","useCallback","id","length","ThemeProvider","Paper","className","Typography","variant","Button","color","onClick","Grid","container","spacing","justify","map","index","item","xs","Card","Switch","checked","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb72e6c7.chunk.js","sourcesContent":["import './Timer.css';\nimport { useEffect, useState, ReactElement } from 'react';\n\ninterface TimerProps {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\n// given: time in seconds, function calculates how much time is left in days, minutes, seconds\nfunction calculateTimeLeft(timeSeconds: number): TimerProps {\n  let timeLeft = { days: 0, hours: 0, minutes: 0, seconds: 0 };\n\n  if (timeSeconds > 0) {\n    timeLeft = {\n      days: Math.floor(timeSeconds / (60 * 60 * 24)),\n      hours: Math.floor((timeSeconds / (60 * 60)) % 24),\n      minutes: Math.floor((timeSeconds / 60) % 60),\n      seconds: Math.floor(timeSeconds % 60),\n    };\n  }\n\n  return timeLeft;\n}\n\nfunction Timer({\n  days = 0,\n  hours = 0,\n  minutes = 0,\n  seconds = 0,\n}: Partial<TimerProps>): ReactElement {\n  const [timeSeconds, setTimeSeconds] = useState(\n    days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds,\n  );\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft(timeSeconds));\n\n  useEffect(() => {\n    setTimeSeconds(\n      days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds,\n    );\n    const timer = setInterval(() => {\n      setTimeSeconds((difference) => difference - 1);\n    }, 1000);\n    // Clear timeout if the component is unmounted\n    return () => clearTimeout(timer);\n  }, [days, hours, minutes, seconds]);\n\n  useEffect(() => {\n    setTimeLeft(calculateTimeLeft(timeSeconds));\n  }, [timeSeconds]);\n\n  return (\n    <div>\n      {timeSeconds > 0 ? (\n        Object.entries(timeLeft).flatMap(([interval, time]) => {\n          if (time > 0)\n            return (\n              <span>\n                {time} {interval}{' '}\n              </span>\n            );\n        })\n      ) : (\n        <span>Time is up!</span>\n      )}\n    </div>\n  );\n}\n\nexport default Timer;\n","import './App.css';\nimport Timer from './components/Timer.react';\nimport { useState, useCallback, ReactElement } from 'react';\nimport {\n  Switch,\n  Grid,\n  Paper,\n  Typography,\n  Card,\n  Button,\n} from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nfunction App(): ReactElement {\n  const [darkMode, setDarkMode] = useState(false);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: darkMode ? 'dark' : 'light',\n    },\n  });\n\n  const defaultTime = { minutes: 5 };\n  const [timers, setTimers] = useState([<Timer {...defaultTime} key={0} />]);\n\n  const addTimer = useCallback(() => {\n    const id = timers.length;\n    setTimers((timers) => [...timers, <Timer {...defaultTime} key={id} />]);\n  }, [timers.length]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Paper className=\"App-paper\">\n        <Typography variant=\"h3\">Centre number RU105</Typography>\n        <Button variant=\"contained\" color=\"primary\" onClick={addTimer}>\n          Add timer\n        </Button>\n        <Grid container spacing={5} justify=\"center\">\n          {timers.map((timer, index) => (\n            <Grid item xs={6} key={index}>\n              <Card variant=\"outlined\" className=\"Card\">\n                <Typography variant=\"h5\">Timer {index}</Typography>\n                {timer}\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n        <Switch checked={darkMode} onChange={() => setDarkMode(!darkMode)} />\n      </Paper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}