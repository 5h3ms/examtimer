{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","calculateTimeLeft","year","Date","getFullYear","difference","timeLeft","days","Math","floor","hours","minutes","seconds","useState","setTimeLeft","useEffect","timer","setTimeout","clearTimeout","timerComponents","Object","keys","forEach","interval","push","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAwDeA,MArDf,WAEI,IAAMC,EAAoB,WACxB,IAAIC,GAAO,IAAIC,MAAOC,cAChBC,GAAc,IAAIF,KAAJ,gBAAkBD,KAAW,IAAIC,KACjDG,EAAW,GAWjB,OATMD,EAAa,IACfC,EAAW,CACTC,KAAMC,KAAKC,MAAMJ,EAAU,OAC3BK,MAAOF,KAAKC,MAAOJ,EAAU,KAAuB,IACpDM,QAASH,KAAKC,MAAOJ,EAAa,IAAO,GAAM,IAC/CO,QAASJ,KAAKC,MAAOJ,EAAa,IAAQ,MAIzCC,GAhBI,EAoBqBO,mBAASZ,KApB9B,mBAoBJK,EApBI,KAoBMQ,EApBN,KAsBXC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBH,EAAYb,OACb,KAEH,OAAO,kBAAMiB,aAAaF,OAG1B,IAAMG,EAAkB,GAcxB,OAZAC,OAAOC,KAAKf,GAAUgB,SAAQ,SAACC,GACxBjB,EAASiB,IAIdJ,EAAgBK,KACd,iCACGlB,EAASiB,GADZ,IACwBA,EAAU,WAMpC,gCACE,8DACA,mDACDJ,EAAgBM,OAASN,EAAkB,kDCvCnCO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9e981035.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction App() {\r\n  \r\n    const calculateTimeLeft = () => {\r\n      let year = new Date().getFullYear();\r\n      const difference = +new Date(`12/29/${year}`) - +new Date();\r\n      let timeLeft = {};\r\n\r\n      if (difference > 0) {\r\n        timeLeft = {\r\n          days: Math.floor(difference / (1000 * 60 * 60 * 24)),\r\n          hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n          minutes: Math.floor((difference / 1000 / 60) % 60),\r\n          seconds: Math.floor((difference / 1000) % 60)\r\n          };\r\n      }\r\n\r\n    return timeLeft;\r\n\r\n    }\r\n\r\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\r\n\r\n    useEffect(() => {\r\n      const timer = setTimeout(() => {\r\n        setTimeLeft(calculateTimeLeft());\r\n    }, 1000);\r\n    // Clear timeout if the component is unmounted\r\n    return () => clearTimeout(timer);\r\n    });\r\n\r\n    const timerComponents = [];\r\n\r\n    Object.keys(timeLeft).forEach((interval) => {\r\n      if (!timeLeft[interval]) {\r\n        return;\r\n      }\r\n\r\n      timerComponents.push(\r\n        <span>\r\n          {timeLeft[interval]} {interval}{\" \"}\r\n        </span>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <h1>HacktoberFest 2020 Countdown</h1>\r\n        <h2>With React Hooks!</h2>  \r\n      {timerComponents.length ? timerComponents : <span>Time's up!</span>}\r\n   </div>  \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}